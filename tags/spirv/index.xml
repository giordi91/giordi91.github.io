<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spirv on A-programmer&#39;s-cave</title>
    <link>/tags/spirv/</link>
    <description>Recent content in Spirv on A-programmer&#39;s-cave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2018 - present, all rights reserved.</copyright>
    <lastBuildDate>Sun, 26 Jan 2020 08:53:02 +0000</lastBuildDate>
    
	<atom:link href="/tags/spirv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SPIR-V vec3 buffers</title>
      <link>/post/spirvvec3/</link>
      <pubDate>Sun, 26 Jan 2020 08:53:02 +0000</pubDate>
      
      <guid>/post/spirvvec3/</guid>
      <description>You just add a vec3 storage buffer in your GLSL shader&amp;hellip;. but can&amp;rsquo;t index it properly, let us find out why 
vec3 buffers indexing fights back again I am neck deep in the refactor of my engine, getting the Vulkan back end in a good state. During my work to start rendering meshes in a uniform way for both DX12 and VK, I moved from vertex push (that is, using a vertex declaration and have the vertex attributes appear in the vertex shader) to vertex pull (i.</description>
    </item>
    
  </channel>
</rss>